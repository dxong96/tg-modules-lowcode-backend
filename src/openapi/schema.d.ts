/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/tg_modules": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get terragrunt modules that are available */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TgModule"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/files": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get all files */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UploadedFile"][];
                    };
                };
            };
        };
        put?: never;
        /** Upload file */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "multipart/form-data": {
                        /** Format: binary */
                        uploadedFile: string;
                        nodeId: string;
                    };
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UploadedFile"];
                    };
                };
                /** @description missing request body properties */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        schema: unknown;
                    };
                };
            };
        };
        /** Delete all files (will only work in local env) */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/files/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Download file by id */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id of file */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/octet-stream": unknown;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete file by id */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id of file */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/files/deleteByNodeId/{nodeId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete files by nodeId */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description nodeId */
                    nodeId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{id}/saveState": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** save the state of the flow for a given project */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description id of project */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["SaveState"];
                };
            };
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SaveState"];
                    };
                };
                /** @description bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{id}/getState": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get the state of the flow for a given project */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description id of project */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SaveState"];
                    };
                };
                /** @description project is not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{id}/generateAndDownload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * generate and download zip for a given project
         * @description generate zip from existing state of the project
         *     will return error if unable to generate
         *     will return a zip if no issues
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description id of project */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful generate zip */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/octet-stream": unknown;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        PossibleInput: {
            /** @description Variable name of the input */
            name: string;
            /** @description Variable type defined at module tf file */
            type: string;
            /** @description Default variable value defined at module tf file of */
            default: unknown;
            /** @description Indicate whether is variable is required */
            required: boolean;
        };
        TgModule: {
            /** @description Path to the module from tg_modules folder
             *
             *     Example:
             *     Gitlab url = `https://sgts.gitlab-dedicated.com/wog/mha/ica-e-services/ica_common_services/app/aws_tg/-/tree/master/tg-modules/acm-import`
             *     tgModule = `acm-import` */
            tgModuleName: string;
            possibleInputs: components["schemas"]["PossibleInput"][];
        };
        UploadedFile: {
            id: string;
            name: string;
            isText: boolean;
            nodeId: string;
        };
        ErrorResponse: {
            error: string;
        };
        MyNode: {
            id: string;
            type: string;
            position: {
                x: number;
                y: number;
            };
            data: {
                label: string;
                depth: number;
                tgNodeType: string;
                locals?: {
                    [key: string]: string;
                };
                inputs?: {
                    [key: string]: string;
                };
                files?: {
                    fileName: string;
                    fileId: string;
                }[];
            };
            parentId?: string;
            extent?: string;
            measured: {
                width: number;
                height: number;
            };
            width?: number;
            height?: number;
            selected?: boolean;
            dragging?: boolean;
        };
        MyEdge: {
            markerEnd?: {
                type: string;
            };
            zIndex: number;
            source: string;
            sourceHandle?: string;
            target: string;
            targetHandle?: string;
            id: string;
            selected?: boolean;
            data: {
                dependencyName?: string;
                enabled?: boolean;
            };
        };
        SaveState: {
            nodes: components["schemas"]["MyNode"][];
            edges: components["schemas"]["MyEdge"][];
            viewport?: {
                x: number;
                y: number;
                zoom: number;
            };
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
